import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(levelname)s [%(asctime)s] %(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    level=logging.INFO
)
logger = logging.getLogger("BOT")
logging.getLogger("httpx").propagate = False

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å–Ω–∏–∫–æ–≤
# def participants_formating(s):
#     lst = []
#     for i in s.split(","):
#         while i[0] = " ":
#             i = i[1:]
#         lst.append(i)
#     return lst

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_price(ticket_count: int) -> int:
    logger.info(f"Calculating price for {ticket_count} tickets")
    ticket_price = 250  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω –±–∏–ª–µ—Ç
    if ticket_count == 10:
        discount = 0.10  # –°–∫–∏–¥–∫–∞ 10%
        total_price = ticket_count * ticket_price * (1 - discount)
    else:
        total_price = ticket_count * ticket_price
    logger.info(f"Total price for {ticket_count} tickets: {total_price}")
    return int(total_price)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
async def restart_via_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("Restarting bot via /start")
    query = update.callback_query
    await query.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ -> /start"
    )

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.effective_user.id} started the bot")
    keyboard = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç üéüÔ∏è", callback_data="buy_ticket")],
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üçΩÔ∏è", callback_data="reserve_table")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ", callback_data="restart_bot")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ '–í—Ä–µ–º—è —á—É–¥–µ—Å'! üéâ\n"
        "–¢—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º, —è —Ç–µ–±–µ –≤ —ç—Ç–æ–º –ø–æ–º–æ–≥—É. \n"
        "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=reply_markup
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"User {query.from_user.id} selected menu option: {query.data}")

    if query.data == "buy_ticket":
        await show_ticket_options(query, context)
    elif query.data == "reserve_table":
        await query.edit_message_text(f"–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @kste0009 \n–ù–∞–∂–º–∏—Ç–µ -> /start")
    elif query.data == "restart_bot":
        await start(update, context)

# –í—ã–±–æ—Ä –±–∏–ª–µ—Ç–æ–≤
async def show_ticket_options(update_or_query, context):
    logger.info("Displaying ticket options")
    keyboard = [
        [InlineKeyboardButton("1 –±–∏–ª–µ—Ç üéüÔ∏è", callback_data="1_ticket")],
        [InlineKeyboardButton("2 –±–∏–ª–µ—Ç–∞ üéüÔ∏è", callback_data="2_tickets")],
        [InlineKeyboardButton("3 –±–∏–ª–µ—Ç–∞ üéüÔ∏è", callback_data="3_tickets")],
        [InlineKeyboardButton("4 –±–∏–ª–µ—Ç–∞ üéüÔ∏è", callback_data="4_tickets")],
        [InlineKeyboardButton("9+1 –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è", callback_data="10_tickets")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–π–¥—ë—Ç 10 –¥–µ–∫–∞–±—Ä—è.\n"
            "–°–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?\n"
            "P.S. –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ 10 –±–∏–ª–µ—Ç–æ–≤ - —Å–∫–∏–¥–∫–∞ 10%",
            reply_markup=reply_markup
        )
    else:
        await update_or_query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–π–¥—ë—Ç 10 –¥–µ–∫–∞–±—Ä—è.\n"
            "–°–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?\n"
            "P.S. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–∞–π–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è ¬´9+1¬ª. \n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–µ–≤—è—Ç–∏ –±–∏–ª–µ—Ç–æ–≤, –¥–µ—Å—è—Ç—ã–π –∏–¥–µ—Ç –≤ –ø–æ–¥–∞—Ä–æ–∫üéÅ",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤
async def handle_ticket_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"User {query.from_user.id} selected ticket option: {query.data}")

    user_id = query.from_user.id
    ticket_count = int(query.data.split("_")[0])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
    user_data[user_id] = {"tickets": ticket_count}

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
    total_price = calculate_price(ticket_count)
    user_data[user_id]["total_price"] = total_price  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É

    await query.edit_message_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {ticket_count}.\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {total_price} py6.\n\n"
        f"–¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.\n"
        f"–ï—Å–ª–∏ —Ç—ã –Ω–µ –æ–¥–∏–Ω, —Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –≤–∑—è–ª –±–∏–ª–µ—Ç—ã!\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, –ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞"
    )
    user_data[user_id]["step"] = "participants"

# –í–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def handle_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in user_data and user_data[user_id].get("step") == "participants":
        participants = [i.strip() for i in update.message.text.split(",")]
        user_data[user_id]["participants"] = participants

        logger.info(f"User {user_id} provided participants: {participants}")

        await update.message.reply_text(
            f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–Ω—è—Ç, –ø—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!:\n{chr(10).join(participants)}\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n\n"
            f"`{config.card_number}`\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å—é–¥–∞!",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ üîÑ", callback_data="restart_bot")]
            ])
        )
        user_data[user_id]["step"] = "payment"
    else:
        logger.warning(f"Unexpected input from user {user_id} at step {user_data.get(user_id, {}).get('step')}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ–¥–∏–∞
async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_data.get(user_id) and user_data[user_id].get("step") == "payment":
        ticket_count = user_data[user_id]["tickets"]
        total_price = user_data[user_id]["total_price"]
        participants = user_data[user_id]["participants"]

        logger.info(f"User {user_id} submitted payment proof for {ticket_count} tickets")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        username = update.message.from_user.username
        user_tag = f"@{username}" if username else f"[{update.message.from_user.full_name}](tg://user?id={user_id})"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=config.admin,
            text=(f"–û–ø–ª–∞—Ç–∞ –æ—Ç {user_tag}\n"
                  f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {ticket_count}\n"
                  f"–¶–µ–Ω–∞: {total_price} —Ä—É–±.\n"
                  f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{chr(10).join(participants)}"),
            parse_mode="Markdown"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ
        if update.message.photo:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await context.bot.send_photo(chat_id=config.admin, photo=update.message.photo[-1].file_id)
            await update.message.reply_text("–î–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—É—Å—Ç–≤—É—é—â–∏—Ö. –ñ–¥—ë–º –≤–∞—Å 10 –¥–µ–∫–∞–±—Ä—è –≤ 22:00 –≤ –¢—Ä–µ–Ω–¥–µ! \n–ë—É–¥—å—Ç–µ –Ω–∞—Ä—è–¥–Ω—ã–º–∏ –∏ —Å —Ö–æ—Ä–æ—à–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º) \n–ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç–∞!")
        else:
            logger.warning(f"User {user_id} submitted unexpected media type.")
            await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(config.token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(restart_via_start, pattern="^restart_bot$"))
    application.add_handler(CallbackQueryHandler(main_menu_handler, pattern="^(buy_ticket|reserve_table|restart_bot)$"))
    application.add_handler(CallbackQueryHandler(handle_ticket_selection, pattern="^(1_ticket|2_tickets|3_tickets|4_tickets|10_tickets)$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_participants))
    application.add_handler(MessageHandler(filters.PHOTO, handle_screenshot))

    logger.info("Bot started")  
    application.run_polling()

if __name__ == "__main__":
    main()
